// #define TRY_CALL(method_name, ...) \
//     if constexpr (has_##method_name<T>::value) { \
//         INFO("Find ", #method_name); \
//         obj.##method_name(__VA_ARGS__); \
//     } else { \
//         ERROR(#method_name, " does not exist.", __LINE__); \
//     }

// #define HAS_METHOD(method_name) \
//     template<typename U, typename = void> \
//     struct has_##method_name : std::false_type {}; \
//     template<typename U> \
//     struct has_##method_name<U, std::void_t<decltype(&U::method_name)>> : std::true_type {};

// #define DECLARE_METHOD(method_name, ...) \
//     template<typename U> \
//     int method_##method_name(U obj) \
//     { \
//         if constexpr (has_##method_name<T>::value) { \
//             return obj->##method_name(__VA_ARGS__); \
//         } else { \
//             Utils::Log::Error(#method_name, " does not exist.", __LINE__); \
//         } \
//         return false; \
//     }

// #define DEFINE_METHOD(method_name) \
//     HAS_METHOD(method_name) \
//     DECLARE_METHOD(method_name)

// #define CALL_METHOD(obj, method_name) \
//     method_##method_name(obj)
